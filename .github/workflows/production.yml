# Production CI/CD Pipeline
# Automated testing, security scanning, and deployment

name: Production CI/CD Pipeline

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main, production ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security Analysis
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install bandit safety flake8 mypy black isort

    - name: Run Black code formatter check
      run: black --check --diff .

    - name: Run isort import sorting check
      run: isort --check-only --diff .

    - name: Run flake8 linter
      run: flake8 . --max-line-length=100 --exclude=.git,__pycache__,build,dist

    - name: Run mypy type checking
      run: mypy . --ignore-missing-imports

    - name: Run bandit security linter
      run: bandit -r . -x tests/

    - name: Run safety check for dependencies
      run: safety check

    - name: CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: heimnetz_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Set up test environment
      run: |
        cp config/test.env .env
        export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/heimnetz_test
        export REDIS_URL=redis://localhost:6379
        export HEIMNETZ_ENV=test

    - name: Run unit tests
      run: |
        python -m pytest tests/unit/ -v --cov=. --cov-report=xml --cov-report=html

    - name: Run integration tests
      run: |
        python -m pytest tests/integration/ -v

    - name: Run security tests
      run: |
        python -m pytest tests/security/ -v

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:5000'

  # Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: [code-quality, test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'release'
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        format: 'sarif'
        output: 'trivy-image-results.sarif'

    - name: Upload image scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-image-results.sarif'

  # Load Testing
  load-test:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install locust

    - name: Run load tests
      run: |
        locust -f tests/load/locustfile.py --headless --users 100 --spawn-rate 10 --run-time 300s --host http://localhost:5000

  # Staging Deployment
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-push, load-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        envsubst < k8s/deployment.yml | kubectl apply -f -
        kubectl rollout status deployment/heimnetz-deployment -n heimnetz-staging

    - name: Run smoke tests
      run: |
        python -m pytest tests/smoke/ -v --staging-url=${{ secrets.STAGING_URL }}

  # Production Deployment (Blue-Green)
  deploy-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'release'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.27.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Blue-Green Deployment
      run: |
        # Deploy to green environment
        envsubst < k8s/deployment.yml | sed 's/heimnetz-deployment/heimnetz-deployment-green/' | kubectl apply -f -
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/heimnetz-deployment-green -n heimnetz-production
        
        # Run production health checks
        python scripts/health_check.py --url=${{ secrets.PRODUCTION_URL }}
        
        # Switch traffic to green
        kubectl patch service heimnetz-service -n heimnetz-production -p '{"spec":{"selector":{"version":"green"}}}'
        
        # Wait for traffic switch
        sleep 30
        
        # Verify green deployment
        python scripts/health_check.py --url=${{ secrets.PRODUCTION_URL }}
        
        # Scale down blue deployment
        kubectl scale deployment heimnetz-deployment -n heimnetz-production --replicas=0

    - name: Run production smoke tests
      run: |
        python -m pytest tests/smoke/ -v --production-url=${{ secrets.PRODUCTION_URL }}

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        message: 'Production deployment successful! :rocket:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback on failure
  rollback-on-failure:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    environment: production
    steps:
    - name: Rollback deployment
      run: |
        echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig
        
        # Switch traffic back to blue
        kubectl patch service heimnetz-service -n heimnetz-production -p '{"spec":{"selector":{"version":"blue"}}}'
        
        # Scale up blue deployment
        kubectl scale deployment heimnetz-deployment -n heimnetz-production --replicas=3
        
        # Scale down green deployment
        kubectl scale deployment heimnetz-deployment-green -n heimnetz-production --replicas=0

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        message: 'Production deployment failed! Rollback executed. :warning:'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
