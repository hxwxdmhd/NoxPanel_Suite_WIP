name: NoxPanel CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock black flake8 mypy
      
      - name: Code formatting check
        run: black --check AI/NoxPanel/
      
      - name: Lint with flake8
        run: |
          flake8 AI/NoxPanel/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 AI/NoxPanel/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Type checking with mypy
        run: mypy AI/NoxPanel/ --ignore-missing-imports
      
      - name: Run backend tests
        run: |
          cd AI/NoxPanel
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./AI/NoxPanel/coverage.xml
          fail_ci_if_error: true

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: AI/NoxPanel/frontend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd AI/NoxPanel/frontend
          npm ci
      
      - name: Type checking
        run: |
          cd AI/NoxPanel/frontend
          npm run type-check
      
      - name: Lint code
        run: |
          cd AI/NoxPanel/frontend
          npm run lint
      
      - name: Run tests
        run: |
          cd AI/NoxPanel/frontend
          npm run test -- --coverage --watchAll=false
      
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./AI/NoxPanel/frontend/coverage/lcov.info
          flag: frontend

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: noxpanel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: AI/NoxPanel/frontend/package-lock.json
      
      - name: Install backend dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install frontend dependencies
        run: |
          cd AI/NoxPanel/frontend
          npm ci
      
      - name: Build frontend
        run: |
          cd AI/NoxPanel/frontend
          npm run build
      
      - name: Start backend server
        run: |
          cd AI/NoxPanel
          python ultra_optimized_noxpanel.py &
          sleep 10
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/noxpanel_test
          FLASK_ENV: testing
      
      - name: Run integration tests
        run: |
          cd AI/NoxPanel
          python -m pytest tests/integration/ -v
      
      - name: Test API endpoints
        run: |
          cd AI/NoxPanel
          python scripts/test_api_endpoints.py

  build-and-push:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/noxpanel
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./AI/NoxPanel
          file: ./AI/NoxPanel/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./AI/NoxPanel/frontend
          file: ./AI/NoxPanel/frontend/Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository }}/noxpanel-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment"
          # Add deployment commands here
          # This could be kubectl, docker-compose, or cloud provider CLI
          
          # Example for Docker Compose deployment:
          # docker-compose -f docker-compose.staging.yml down
          # docker-compose -f docker-compose.staging.yml pull
          # docker-compose -f docker-compose.staging.yml up -d
      
      - name: Run smoke tests
        run: |
          echo "ðŸ§ª Running smoke tests against staging"
          # Add smoke test commands
          sleep 30  # Wait for deployment
          curl -f https://staging.noxpanel.example.com/health || exit 1

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying to production environment"
          # Add production deployment commands
          
      - name: Run production smoke tests
        run: |
          echo "ðŸ§ª Running production smoke tests"
          sleep 30
          curl -f https://noxpanel.example.com/health || exit 1
      
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install k6
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: Run performance tests
        run: |
          cd AI/NoxPanel/tests/performance
          k6 run --vus 50 --duration 5m load-test.js
      
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: AI/NoxPanel/tests/performance/results/

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep
      
      - name: Run safety check
        run: safety check -r requirements.txt
      
      - name: Run bandit security linter
        run: bandit -r AI/NoxPanel/ -f json -o bandit-report.json
      
      - name: Run semgrep
        run: |
          python -m semgrep --config=auto AI/NoxPanel/ --json --output=semgrep-report.json
      
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json
            semgrep-report.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=noxpanel
            -Dsonar.organization=your-org
            -Dsonar.sources=AI/NoxPanel/
            -Dsonar.tests=AI/NoxPanel/tests/
            -Dsonar.python.coverage.reportPaths=AI/NoxPanel/coverage.xml
            -Dsonar.javascript.lcov.reportPaths=AI/NoxPanel/frontend/coverage/lcov.info

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [security-scan, test-backend, test-frontend, integration-tests]
    if: always()
    
    steps:
      - name: Send notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
